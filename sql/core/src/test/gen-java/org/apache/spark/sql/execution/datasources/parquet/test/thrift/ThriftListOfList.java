/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.spark.sql.execution.datasources.parquet.test.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-8-22")
public class ThriftListOfList implements org.apache.thrift.TBase<ThriftListOfList, ThriftListOfList._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftListOfList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftListOfList");

  private static final org.apache.thrift.protocol.TField INT_LISTS_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("intListsColumn", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftListOfListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftListOfListTupleSchemeFactory());
  }

  public List<List<Integer>> intListsColumn; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INT_LISTS_COLUMN((short)1, "intListsColumn");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INT_LISTS_COLUMN
          return INT_LISTS_COLUMN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INT_LISTS_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("intListsColumn", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftListOfList.class, metaDataMap);
  }

  public ThriftListOfList() {
  }

  public ThriftListOfList(
    List<List<Integer>> intListsColumn)
  {
    this();
    this.intListsColumn = intListsColumn;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftListOfList(ThriftListOfList other) {
    if (other.isSetIntListsColumn()) {
      List<List<Integer>> __this__intListsColumn = new ArrayList<List<Integer>>(other.intListsColumn.size());
      for (List<Integer> other_element : other.intListsColumn) {
        List<Integer> __this__intListsColumn_copy = new ArrayList<Integer>(other_element);
        __this__intListsColumn.add(__this__intListsColumn_copy);
      }
      this.intListsColumn = __this__intListsColumn;
    }
  }

  public ThriftListOfList deepCopy() {
    return new ThriftListOfList(this);
  }

  @Override
  public void clear() {
    this.intListsColumn = null;
  }

  public int getIntListsColumnSize() {
    return (this.intListsColumn == null) ? 0 : this.intListsColumn.size();
  }

  public java.util.Iterator<List<Integer>> getIntListsColumnIterator() {
    return (this.intListsColumn == null) ? null : this.intListsColumn.iterator();
  }

  public void addToIntListsColumn(List<Integer> elem) {
    if (this.intListsColumn == null) {
      this.intListsColumn = new ArrayList<List<Integer>>();
    }
    this.intListsColumn.add(elem);
  }

  public List<List<Integer>> getIntListsColumn() {
    return this.intListsColumn;
  }

  public ThriftListOfList setIntListsColumn(List<List<Integer>> intListsColumn) {
    this.intListsColumn = intListsColumn;
    return this;
  }

  public void unsetIntListsColumn() {
    this.intListsColumn = null;
  }

  /** Returns true if field intListsColumn is set (has been assigned a value) and false otherwise */
  public boolean isSetIntListsColumn() {
    return this.intListsColumn != null;
  }

  public void setIntListsColumnIsSet(boolean value) {
    if (!value) {
      this.intListsColumn = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INT_LISTS_COLUMN:
      if (value == null) {
        unsetIntListsColumn();
      } else {
        setIntListsColumn((List<List<Integer>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INT_LISTS_COLUMN:
      return getIntListsColumn();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INT_LISTS_COLUMN:
      return isSetIntListsColumn();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftListOfList)
      return this.equals((ThriftListOfList)that);
    return false;
  }

  public boolean equals(ThriftListOfList that) {
    if (that == null)
      return false;

    boolean this_present_intListsColumn = true && this.isSetIntListsColumn();
    boolean that_present_intListsColumn = true && that.isSetIntListsColumn();
    if (this_present_intListsColumn || that_present_intListsColumn) {
      if (!(this_present_intListsColumn && that_present_intListsColumn))
        return false;
      if (!this.intListsColumn.equals(that.intListsColumn))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_intListsColumn = true && (isSetIntListsColumn());
    list.add(present_intListsColumn);
    if (present_intListsColumn)
      list.add(intListsColumn);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftListOfList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIntListsColumn()).compareTo(other.isSetIntListsColumn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntListsColumn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intListsColumn, other.intListsColumn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftListOfList(");
    boolean first = true;

    sb.append("intListsColumn:");
    if (this.intListsColumn == null) {
      sb.append("null");
    } else {
      sb.append(this.intListsColumn);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (intListsColumn == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'intListsColumn' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftListOfListStandardSchemeFactory implements SchemeFactory {
    public ThriftListOfListStandardScheme getScheme() {
      return new ThriftListOfListStandardScheme();
    }
  }

  private static class ThriftListOfListStandardScheme extends StandardScheme<ThriftListOfList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftListOfList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INT_LISTS_COLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                struct.intListsColumn = new ArrayList<List<Integer>>(_list52.size);
                List<Integer> _elem53;
                for (int _i54 = 0; _i54 < _list52.size; ++_i54)
                {
                  {
                    org.apache.thrift.protocol.TList _list55 = iprot.readListBegin();
                    _elem53 = new ArrayList<Integer>(_list55.size);
                    int _elem56;
                    for (int _i57 = 0; _i57 < _list55.size; ++_i57)
                    {
                      _elem56 = iprot.readI32();
                      _elem53.add(_elem56);
                    }
                    iprot.readListEnd();
                  }
                  struct.intListsColumn.add(_elem53);
                }
                iprot.readListEnd();
              }
              struct.setIntListsColumnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftListOfList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.intListsColumn != null) {
        oprot.writeFieldBegin(INT_LISTS_COLUMN_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.intListsColumn.size()));
          for (List<Integer> _iter58 : struct.intListsColumn)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter58.size()));
              for (int _iter59 : _iter58)
              {
                oprot.writeI32(_iter59);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftListOfListTupleSchemeFactory implements SchemeFactory {
    public ThriftListOfListTupleScheme getScheme() {
      return new ThriftListOfListTupleScheme();
    }
  }

  private static class ThriftListOfListTupleScheme extends TupleScheme<ThriftListOfList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftListOfList struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.intListsColumn.size());
        for (List<Integer> _iter60 : struct.intListsColumn)
        {
          {
            oprot.writeI32(_iter60.size());
            for (int _iter61 : _iter60)
            {
              oprot.writeI32(_iter61);
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftListOfList struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list62 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.intListsColumn = new ArrayList<List<Integer>>(_list62.size);
        List<Integer> _elem63;
        for (int _i64 = 0; _i64 < _list62.size; ++_i64)
        {
          {
            org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            _elem63 = new ArrayList<Integer>(_list65.size);
            int _elem66;
            for (int _i67 = 0; _i67 < _list65.size; ++_i67)
            {
              _elem66 = iprot.readI32();
              _elem63.add(_elem66);
            }
          }
          struct.intListsColumn.add(_elem63);
        }
      }
      struct.setIntListsColumnIsSet(true);
    }
  }

}

